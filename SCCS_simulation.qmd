---
title: "SCCS Simulation"
format: 
  html:
    toc: true
    toc-depth: 3  
    toc-location: left  
editor: visual
---

```{r include=FALSE, message = FALSE}
#Load packages and data
if (!require("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library(pacman)
pacman::p_load(
              foreach, #foreach loop
              stats,
              tidyverse,
              extraDistr,
              SCCS,
              doParallel
              ) 

options(scipen = 999)
```

## Simple SCCS

### Data generating mechanism

-   Design: SCCS (thus only subjects with outcome are included)
-   Sample size: 1000 cases
-   Observation period: 500 days for all individuals
-   Length of risk period following exposure: 7 or 28 days
-   Control period = Observation period minus risk period
-   True direct effect of E (exposure) on Y (outcome): $IRR = e^\beta = 1, 2 or 5$
-   Baseline rate of the event: $exp(\psi_i) = 1*10^{-5}$, thus the event is rare and no more than 1% of cases having \>1 event during the observation period

Procedure to generate data: 

1. Fix parameter values and random seed

2.  Generate exposure date. Then the observation time is partitioned into risk and control period, with $e_{ik}$ number of day subject $i$ spends in period $k$

3.  Generate the marginal total number of events per subject, using a zero-truncated Poisson distribution with rate $\Sigma_{k=0}^{1}\lambda_{ik}e_{ik} =\Sigma_{k=0}^{2}exp[\psi_i + \beta k]e_{ik}$, conditionally on the exposure history.

4.  Use multinomial distribution to randomly allocate each event with the probability $\frac{\lambda_{ik}e_{ik}}{\Sigma_{k=0}^1\lambda_{ik}e_{ik}}$ to the risk/ control period for each subject

5.  Fit the SCCS model (Conditional Poisson regression) to estimate the IRR & their 95% CI of the effect of E on Y

6.  Repeat the step 2 to 5 to conduct 10000 replicates of the simulation

7.  Output the results: 1) the pooled IRR 2) Percentage of bias compared to the true IRR 3) Empirical standard error 4) Coverage of CI.

#### Function to generate SCCS data

```{r}
simple_sccs_data <- function(n = 1000, obs_time = 500, baseline_rate = 1e-5, beta=log(2), risk_length=28)
{
  dataset <- data.frame()
  
  for (i in 1:n)
  {
    # Generate exposure time
    exposure_start <- sample(1:(obs_time - risk_length), 1) #date of exposure
    exposure_end <- exposure_start + risk_length - 1        
    lambda0 <- baseline_rate
    lambda1 <- baseline_rate * exp(beta)
    
    e0 <- obs_time - risk_length #length control window
    e1 <- risk_length
    mu <- lambda0 * e0 + lambda1 * e1 #event rate
    
    # Generate marginal total number of events per subject, at least 1 event
    total_events <- rtpois(1, lambda = mu, a = 0) 
    
    # Allocate event to risk/control period
    p0 <- (lambda0 * e0) / mu
    p1 <- (lambda1 * e1) / mu
    allocation <- rmultinom(1, total_events, prob = c(p0, p1)) 
    n0 <- allocation[1] #nr event in control period
    n1 <- allocation[2] #nr event in risk period
    
    event_days_0 <- if (n0 > 0) sample(setdiff(1:obs_time, exposure_start:exposure_end), n0, replace = TRUE) else numeric(0)
    event_days_1 <- if (n1 > 0) sample(exposure_start:exposure_end, n1, replace = TRUE) else numeric(0)
    event_days <- sort(c(event_days_0, event_days_1))
    
    # Generate observation for each subject
    indiv_df <- data.frame(
    indiv = rep(i, length(event_days)),
    eventday = event_days,
    expostart = rep(exposure_start, length(event_days)),
    expoend = rep(exposure_end, length(event_days)),
    obs_start = 1,
    obs_end = obs_time
    )
      
    dataset <- bind_rows(dataset, indiv_df)
  }
  
  return(dataset)
}
```

### Data analysis

#### Function to analyse dataset

```{r}
analyse_sccs_simple <- function(df, rep)
  {

  # Fit SCCS model
  model <- standardsccs(event ~ expostart, 
                       indiv= indiv,      # subject ID
                       astart = obs_start,# start of observation period 
                       aend = obs_end,    # end of observation period 
                       aevent = eventday, # event time
                       adrug = expostart, # start of exposure
                       aedrug = expoend,  # end of risk period
                       expogrp = 0,       # start of risk period counted from 'adrug'
                       data = df)
  
  # Extract results from SCCS model
  est <- coef(model)[1,1]
  se <- coef(model)[1,3]
  IRR <- exp(est)
  IRR_CI_Lower <- model$conf.int[,3]
  IRR_CI_Upper <- model$conf.int[,4]
  n_event <- model$nevent
  res <- data.frame(rep = rep, est, se, IRR, IRR_CI_Lower, IRR_CI_Upper, n_event, row.names = NULL)
  return(res)
}
```

#### Function to loop simulation

Small number of iterations to check if it works:

```{r}
set.seed(1003)

n_sim <- 10

rng_states <- list() #Store the state of the random number generator 

results <- foreach( i = 1:n_sim, .combine="rbind") %do% {
  rng_states[[i]] <- .Random.seed  # save RNG state
  data <- simple_sccs_data(n = 1000, obs_time = 500, baseline_rate = 1e-5, beta=log(2), risk_length=28)
  result<-analyse_sccs_simple(data, i)
}
# view results
head(results)

```

## Check the simulation

### Simulate and analyse a single set of data

```{r}
set.seed(100)
data_test <- simple_sccs_data(n = 1000, obs_time = 500, baseline_rate = 1e-5, beta=log(2), risk_length=28)

result_test <- analyse_sccs_simple(data_test,1)
result_test
```

### Recreate a Specific Dataset Using a Stored RNG State

```{r}
.Random.seed <- rng_states[[6]]
data_6 <- simple_sccs_data(n = 1000, obs_time = 500, baseline_rate = 1e-5, beta=log(2), risk_length=28)
result_test2 <- analyse_sccs_simple(data_6, 1)
result_test2
```

## Alternative data generating procedure

1. Generate a cohort of 192000 individuals (to get ~1000 events)
2. Generate observation time: 500 for all individuals
3. Generate binary exposure (vaccination) for 80% of the individuals
    + Date of exposure (for those with the exposure present): random variable from a uniform distribution within each individuals' observation period
    + Risk window length: 28 days post-exposure
4. Binary outcome: generated as a function of baseline event probability ($\beta_0$) and exposure status ($\beta_1$). The daily probability of the outcome on day $j$ during the observation period of individual $i$ is calculated from the logistic regression model:

$$Logit[Pr(Y_{ij} = 1)] = \beta_0 + \beta_1*Exposure_{ij}$$
- Set $\beta_0 = ln(1e-5), \beta_1 = ln(2)$ (Outcome is rare and being exposed increase the odds of the outcome 2 times)
- Based on the daily probability, generate the binary outcome using a Bernoulli trial
- Each subjects could have multiple (independent) outcomes

```{r}
simple_sccs_data2 <- function(n = 192000, obs_time = 500, baseline_rate = 1e-5, IRR = 2, risk_length=28)
{
  beta0 <- qlogis(baseline_rate)   
  beta1 <- log(IRR)
  
  dataset <- data.frame()
  
    # Assign exposure status
    exposed <- rbinom(n, 1, 0.8)
    # If exposed, assign exposure date
    exposure_start <- rep(NA, n)
    exposure_start[exposed == 1] <- sample(1:(obs_time - risk_length), 
                                           sum(exposed), replace = TRUE)
    exposure_end <- exposure_start + risk_length - 1
    
    # Expand the data to long format: one row per individual per day
    id <- rep(1:n, each = obs_time)
    day <- rep(1:obs_time, times = n)
    
    # Daily exposure status
    exposure_start_long <- rep(exposure_start, each = obs_time)
    exposure_end_long <- rep(exposure_end, each = obs_time)
    exposure_status <- ifelse(!is.na(exposure_start_long) & day >= exposure_start_long & day <= exposure_end_long, 1, 0)
    # Daily outcome status
    logit_p <- beta0 + beta1 * exposure_status
    p_event <- plogis(logit_p)
    outcome <- rbinom(length(p_event), 1, p_event)
    
    # Long data format
  long_data <- data.frame(
    id = id,
    day = day,
    exposure = exposure_status,
    outcome = outcome,
    exposure_start = exposure_start_long,
    exposure_end = exposure_end_long
  )

  # Keep only event days
  event_data <- subset(long_data, outcome == 1 & !is.na(exposure_start_long))
  
  # SCCS data format
    sccs_data <- data.frame(
    indiv = event_data$id,
    obs_start = 1,
    obs_end = obs_time,
    expostart = event_data$exposure_start,
    expoend = event_data$exposure_end,
    eventday = event_data$day
  )
  
  return(sccs_data)
}
```

### Test the data-generating mechanism
```{r}
set.seed(100)
data_test <- simple_sccs_data2(n = 192000, obs_time = 500, baseline_rate = 1e-5, IRR = 2, risk_length=28)

result_test <- analyse_sccs_simple(data_test,1)
result_test
```

```{r}
set.seed(1003)

n_sim <- 10

rng_states <- list() #Store the state of the random number generator 

results <- foreach( i = 1:n_sim, .combine="rbind") %do% {
  rng_states[[i]] <- .Random.seed  # save RNG state
  data <- simple_sccs_data2(n = 192000, obs_time = 500, baseline_rate = 1e-5, IRR = 2, risk_length=28)
  result<-analyse_sccs_simple(data, i)
}
# view results
head(results)

```